#!/usr/bin/env python
PACKAGE = "lane_detection"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# General Settings
group_general = gen.add_group("General_Settings", type="tab")
group_general.add("frequency",              double_t,   0,  "Frequency of the node",            30.0,   0,  50)
group_general.add("display_information",    bool_t,     0,  "Display information in console",   False)
## Waypoint Settings
group_general_1 = group_general.add_group("Waypoint_Settings")
group_general_1.add("look_ahead_min_distance",  double_t,   0,  "Minimum look ahead distance to waypoint [m]",  8.0,    0,  15.0)
group_general_1.add("look_ahead_max_distance",  double_t,   0,  "Maximum look ahead distance to waypoint [m]",  20.0,   0,  40.0)
group_general_1.add("look_ahead_ratio",         double_t,   0,  "Lookahead ratio for next waypoint",            1.0,    0,  5)
## Detection Settings
group_general_2 = group_general.add_group("Detection_Settings")
group_general_2.add("multi_lane_detection",     bool_t,     0,  "Multi Lane Line Detection (Recommend)",        True)
group_general_2.add("polynom_degree",           int_t,      0,  "Degree of interpolation polynom",              2,      1,  10)
group_general_2.add("pixel_to_m",               double_t,   0,  "Relation between pixels and meters",           50.0,   0,  100.0)
group_general_2.add("padding_width",            double_t,   0,  "Padding of perspective image in x direction",  7.0,    0,  15.0)
group_general_2.add("sliding_window_width",     int_t,      0,  "Width of sliding window",                      75,     1,  500)
group_general_2.add("sliding_window_height",    int_t,      0,  "Height of sliding window",                     50,     1,  500)
group_general_2.add("histogramm_limit",         int_t,      0,  "Limit of histogramm analysis",                 360,    0,  2000)
group_general_2.add("color_threshold",          int_t,      0,  "Color threshold for white color detection",    100,    0,  255)

# CV Transform Settings
group_cv = gen.add_group("CV_Transform_Settings", type="tab")
group_cv_0 = group_cv.add_group("Camera_Calibration")
group_cv_0.add("calibration_image_path",    str_t,      0,  "Path where to save the image",                         "/home/ros/Pictures")
group_cv_0.add("save_calibration_image",    bool_t,     0,  "Save an image for calibration of camera (trigger)",    False)
group_cv_0.add("camera_height",             double_t,   0,  "Camera height above ground [m]",                       1.33,   0.0,    3.0)
group_cv_0.add("camera_fov_vertical",       double_t,   0,  "FOV angle vertical [deg]",                             36.0,   0.0,    180.0)
group_cv_0.add("camera_rotation_vertical",  double_t,   0,  "Vertical rotation of camera [deg]",                    -3.0,   -90.0,  90.0)
group_cv_0.add("baselink_camera_distance",  double_t,   0,  "Horizontal distance from baselink to camera frame",    0.42,   0.0,    4.0)
## Source Point 1
group_cv_1 = group_cv.add_group("Source_Point_1")
group_cv_1.add("src_pt1_x", int_t,  0,  "x value of the bottom left source point",  264,    0,  2000)
group_cv_1.add("src_pt1_y", int_t,  0,  "y value of the bottom left source point",  719,    0,  2000)
## Source Point 2
group_cv_2 = group_cv.add_group("Source_Point_2")
group_cv_2.add("src_pt2_x", int_t,  0,  "x value of the bottom right source point", 953,    0,  2000)
group_cv_2.add("src_pt2_y", int_t,  0,  "y value of the bottom right source point", 719,    0,  2000)
## Source Point 3
group_cv_3 = group_cv.add_group("Source_Point_3")
group_cv_3.add("src_pt3_x", int_t,  0,  "x value of the upper right source point",  741,    0,  2000)
group_cv_3.add("src_pt3_y", int_t,  0,  "y value of the upper right source point",  514,    0,  2000)
## Source Point 4
group_cv_4 = group_cv.add_group("Source_Point_4")
group_cv_4.add("src_pt4_x", int_t,  0,  "x value of the upper left source point",   517,    0,  2000)
group_cv_4.add("src_pt4_y", int_t,  0,  "y value of the upper left source point",   514,    0,  2000)
## Destination
group_cv_5 = group_cv.add_group("Destination_Point")
group_cv_5.add("plane_width",   double_t,  0,  "Size of the transform plane in x [m]",    3.00,    0,  50.00)
group_cv_5.add("plane_length",  double_t,  0,  "Size of the transform plane in y [m]",    10.00,   0,  50.00)

exit(gen.generate(PACKAGE, "lane_detection", "LaneDetector"))
